version: '3.9'

services:
  api:
    image: approved-api:latest
    container_name: approved-api
    environment:
      - APP_ENV=production
    env_file:
      - .env.development.docker
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    ports:
      - "8090:8090"
    networks:
      - app-network

  postgres:
    image: postgres:16
    container_name: approved-db
    ports:
      - "5434:5432"
    env_file:
      - .env.db
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U approved"]
      interval: 10s
      timeout: 3s
      retries: 3
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network

  rabbitmq:
    image: rabbitmq:management
    container_name: approved-mq
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 30s
      timeout: 10s
      retries: 5
    volumes:
      - rabbitmqdata:/var/lib/rabbitmq
    networks:
      - app-network

  llm-service:
    image: approved-llm:latest
    container_name: approved-llm
    environment:
      - APP_ENV=production
    env_file:
      - .env.approved-llm
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - app-network

  frontend:
    image: approved-frontend:latest
    container_name: approved-frontend
    ports:
      - "3000:3000"
    depends_on:
      api:
        condition: service_started
    environment:
      APP_ENV: production
    env_file:
      - .env.frontend.docker
    networks:
      - app-network

volumes:
  postgres_data:
  rabbitmqdata:

networks:
  app-network:
    driver: bridge
